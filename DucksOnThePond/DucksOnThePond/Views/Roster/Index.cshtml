@using System.Web.Script.Serialization
@model DucksOnThePond.Models.RosterViewModel

@{
    ViewBag.Title = "Team Roster";
    Layout = "~/Views/Shared/_Layout.Mobile.cshtml";
}

<h2>Team Roster</h2>

<table class='playersEditor'>
    <tr>
        <th>Number</th>
        <th>First name</th>
        <th>Last name</th>
    </tr>
    <tbody data-bind="foreach: Players">
        <tr>
            <td>@Html.TextBoxFor(model => model.Players.First().Number, new {data_bind="value: Number"})</td>
            <td>@Html.TextBoxFor(model => model.Players.First().FirstName, new {data_bind="value: FirstName"})</td>
            <td>@Html.TextBoxFor(model => model.Players.First().LastName, new {data_bind="value: LastName"})</td>
            <td><a href="#" data-bind="click: function () { viewModel.removePlayer(this); }">Remove Player</a></td>
        </tr>
    </tbody>
</table>
<div>
<p>
    <button data-bind='click: addPlayer'>Add Player</button>
</p>
</div>

<script src="~/Scripts/jquery-1.7.1.min.js"></script>
<script src="~/Scripts/knockout-2.3.0.js"></script>
<script src="~/Scripts/knockout.mapping-latest.js"></script>

<script>
    function Player(number, firstName, lastName) {
        var self = this;

        self.Number = ko.observable(number);
        self.FirstName = ko.observable(firstName);
        self.LastName = ko.observable(lastName);
    }

    var dataMappingOptions = {
        players: {
            key: function (data) {
                return ko.utils.unwrapObservable(data.id);
            }
        }
    }

    var viewModel, ModelDefinition =  function (data) {
            var self = this;

            ko.mapping.fromJS(data, {}, self);

            self.addPlayer = function () {
                self.Players.push({
                    Number: "",
                    FirstName: "",
                    LastName: ""
                });
            }

            self.removePlayer = function (row) {
                self.Players.remove(row);
            }
    }
            
    $(document).ready(function () {
        viewModel = new ModelDefinition(@Html.Raw(Json.Encode(Model)))
        ko.applyBindings(viewModel);
    });
</script>